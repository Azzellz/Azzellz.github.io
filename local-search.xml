<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>VueQuill的改造</title>
    <link href="/2023/09/17/%E5%B0%81%E8%A3%85VueQuill/"/>
    <url>/2023/09/17/%E5%B0%81%E8%A3%85VueQuill/</url>
    
    <content type="html"><![CDATA[<h1 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h1><blockquote><p>富文本编辑器是一种用于编辑和格式化文本的工具，它提供了丰富的功能和选项，使用户能够轻松地添加和编辑文字、图像、链接和其他多媒体元素。市面上最常见的富文本编辑器比如说Word..</p></blockquote><p>最近使用Vue3+Ts在开发一个论坛项目时,需要使用到富文本编辑器的插入代码块和图片的功能,</p><p>于是上网溜了一圈了找了像wangEditor这样的强大的开源富文本编辑器,兴冲冲地npm下来后发现存在Ts类型声明文件的错误,上issue找了一圈硬是没找到解决办法,猜测可能是d.ts的类型声明文件的缺失。</p><p>之后找啊找,发现了一个叫Vue-Quill的开源富文本编辑器,实际配置下来发现可以兼容我的ts项目,于是就打算用它了！</p><p>不过Vue-Quill的核心功能较简单,需要自己配置拓展,而且我看了大部分的拓展都是用js写的,没有相应的.d.ts类型声明文件…</p><p>无奈之下,一开始我是打算自己从0开始实现一个富文本编辑器的….  后面发现**巨多坑(极多的边界情况需要考虑)**。</p><p>没办法,自己基于Vue-Quill封装一个吧.</p><h1 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h1><h2 id="在Vue中使用原生DOM进行拓展"><a href="#在Vue中使用原生DOM进行拓展" class="headerlink" title="在Vue中使用原生DOM进行拓展"></a>在Vue中使用原生DOM进行拓展</h2>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>富文本编辑器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端规范(补充中)</title>
    <link href="/2023/09/17/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/"/>
    <url>/2023/09/17/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1 id="桑梓前端开发规范"><a href="#桑梓前端开发规范" class="headerlink" title="桑梓前端开发规范"></a><strong>桑梓前端开发规范</strong></h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文旨在<strong>统一开发规范</strong>,提供一个更加友好,高效的前端开发环境</p><blockquote><p>详细技术细节请看官方文档,本文只提供规范以及部分关键概念</p></blockquote><h2 id="统一技术栈"><a href="#统一技术栈" class="headerlink" title="统一技术栈"></a>统一技术栈</h2><p><a href="https://cn.vuejs.org/">Vue3</a>(主流的渐进式前端框架) + <a href="https://cn.vitejs.dev/">Vite</a>(下一代前端构建工具) + <a href="https://pinia.vuejs.org/zh/">Pinia</a>(符合直觉的 Vue.js 状态管理库) + <a href="https://router.vuejs.org/zh/">VueRouter</a>(Vue.js 的官方路由) + <a href="https://typescript.bootcss.com/">TypeScript</a>(具有强大,灵活的类型系统的 js 超集)</p><hr><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h3 id="初始化步骤应当封装在插件"><a href="#初始化步骤应当封装在插件" class="headerlink" title="初始化步骤应当封装在插件:"></a><strong>初始化步骤应当封装在插件</strong>:</h3><p>将<strong>main.ts</strong>里的初始化工作<strong>按照功能点</strong>封装成<strong>模块化</strong>的插件并存放至<strong>plugins</strong>文件夹</p><h3 id="使用组合式API"><a href="#使用组合式API" class="headerlink" title="使用组合式API:"></a><strong><a href="https://cn.vuejs.org/guide/extras/composition-api-faq.html">使用组合式API</a></strong>:</h3><p>强烈推荐!</p><h3 id="使用来写组件逻辑"><a href="#使用来写组件逻辑" class="headerlink" title="使用&lt;script lang=&quot;ts&quot; setup&gt;来写组件逻辑"></a><a href="https://cn.vuejs.org/api/sfc-script-setup.html"><strong>使用<code>&lt;script lang=&quot;ts&quot; setup&gt;</code>来写组件逻辑</strong></a></h3><p>方便又清晰!</p><h3 id="组件"><a href="#组件" class="headerlink" title="组件:"></a><strong>组件</strong>:</h3><h4 id="组件类型约定"><a href="#组件类型约定" class="headerlink" title="组件类型约定:"></a>组件类型约定:</h4><p>统一使用**<a href="https://cn.vuejs.org/guide/scaling-up/sfc.html#why-sfc">单文件组件(SFC)</a>**的形式</p><h4 id="组件怎么命名"><a href="#组件怎么命名" class="headerlink" title="组件怎么命名?:"></a>组件怎么命名?:</h4><p>都应该使用<strong>多单词</strong>命名组件,多个单词间以**-**分开</p><p>如 <strong>Post-Item.vue</strong></p><h5 id="界面级别的组件"><a href="#界面级别的组件" class="headerlink" title="界面级别的组件"></a>界面级别的组件</h5><blockquote><p>或者说一个路由界面的<strong>根组件</strong></p></blockquote><p>以<strong>XXX-View.vue</strong>来命名</p><p>如 <strong>Home-View.vue</strong> , **User-View.vue **等等..</p><h5 id="非界面级别的组件"><a href="#非界面级别的组件" class="headerlink" title="非界面级别的组件"></a><strong>非界面级别的组件</strong></h5><blockquote><p>或者说一个路由界面的<strong>功能实现组件</strong></p></blockquote><p>以<strong>相关性</strong>来命名</p><p>比如说有一个叫<strong>Post-Comment.vue</strong>的实现评论区的组件</p><p>现在我们想给评论区添加一个卡片组件来展示评论,那么我们应该这样命名:<strong>Post-Comment-Card.vue</strong></p><p>可以看到,这个组件的名字是<strong>紧接着</strong>其相关组件的名字的,这样具有良好的<strong>可读性</strong></p><h4 id="组件怎么封装"><a href="#组件怎么封装" class="headerlink" title="组件怎么封装?:"></a><strong>组件怎么封装?</strong>:</h4><p>应当遵循以下:</p><p>[单向数据流动]: <a href="https://cn.vuejs.org/guide/components/props.html#one-way-data-flow">https://cn.vuejs.org/guide/components/props.html#one-way-data-flow</a>“详情请见”</p><h4 id="组件放哪个文件夹"><a href="#组件放哪个文件夹" class="headerlink" title="组件放哪个文件夹?:"></a><strong>组件放哪个文件夹?</strong>:</h4><p>一般来说,使用 Vue 官方脚手架创建项目时时,会带有这两个文件夹:<strong>components</strong>和<strong>views</strong>.</p><p>接下来我们来区分一下这两个文件夹应该分别存放什么类型的<strong>组件</strong></p><h5 id="components"><a href="#components" class="headerlink" title="components:"></a>components:</h5><p>这个文件夹应当存放可被整个应用多次<strong>复用</strong>(次数至少大于 1)的组件:如 xxx-Card.vue</p><h5 id="views"><a href="#views" class="headerlink" title="views:"></a>views:</h5><p>这个文件夹应当存放<a href="###%E7%95%8C%E9%9D%A2%E7%BA%A7%E5%88%AB%E7%9A%84%E7%BB%84%E4%BB%B6"><strong>界面级别的组件</strong></a>及其附属小组件</p><hr><h2 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h2><h3 id="使用-stores-管理"><a href="#使用-stores-管理" class="headerlink" title="使用 stores 管理"></a><strong>使用 stores 管理</strong></h3><p>使用 Pinia 时应当将各<strong>Store</strong>放入<strong>stores</strong>中的<strong>modules</strong>,并在<strong>stores</strong>的根目录下的<strong>index.ts</strong>中定义一个全局性质的状态管理,封装需要<strong>使用多个 Store</strong>的行为</p><p>文件结构如下:</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">...</span><br>├─stores<br>│  ├─modules<br>│  │  ├─post<br>│  │  ├─user<br>│  │  └─...<br>│  └─index.ts<br><span class="hljs-meta prompt_">...</span><br></code></pre></td></tr></table></figure><p><strong>不仅stores如此,其他可分为模块的文件夹都建议这么写</strong></p><h3 id="命名为useXXXStore"><a href="#命名为useXXXStore" class="headerlink" title="命名为useXXXStore"></a><strong>命名为useXXXStore</strong></h3><p>store的定义导出函数应当这样命名:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> usePostStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;post&#x27;</span>, &#123;...&#125;)<br>                                                 <br></code></pre></td></tr></table></figure><h3 id="Store里应该做什么"><a href="#Store里应该做什么" class="headerlink" title="Store里应该做什么?"></a><strong>Store里应该做什么?</strong></h3><p>Store里应该负责接管<strong>models</strong>提供的<strong>封装好的屏蔽细节的方法</strong>,并基于实际情况进行<strong>二次封装</strong></p><p>看下面这段代码:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><br><span class="hljs-comment">//state约束</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PostState</span> &#123;<br>    <span class="hljs-comment">//记录总post列表</span><br>    <span class="hljs-attr">mainPosts</span>: <span class="hljs-title class_">MainPosts</span><br>    <span class="hljs-comment">//记录最新的post</span><br>    <span class="hljs-attr">latestPosts</span>: <span class="hljs-title class_">LatestPosts</span><br>    <span class="hljs-comment">//记录已经浏览过的post</span><br>    <span class="hljs-attr">visitedPosts</span>: <span class="hljs-title class_">VisitedPosts</span><br>    <span class="hljs-comment">//记录当前的post</span><br>    <span class="hljs-attr">currentPost</span>: <span class="hljs-title class_">Post</span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> usePostStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;post&#x27;</span>, &#123;<br>    <span class="hljs-attr">state</span>: (): <span class="hljs-function"><span class="hljs-params">PostState</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-comment">//记录总post列表</span><br>            <span class="hljs-attr">mainPosts</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">MainPosts</span>(),<br>            <span class="hljs-comment">//记录最新的post</span><br>            <span class="hljs-attr">latestPosts</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">LatestPosts</span>(),<br>            <span class="hljs-comment">//记录已经浏览过的post</span><br>            <span class="hljs-attr">visitedPosts</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">VisitedPosts</span>(),<br>            <span class="hljs-comment">//记录当前浏览的post</span><br>            <span class="hljs-attr">currentPost</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Post</span>()<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">actions</span>: &#123;<br>        <span class="hljs-comment">//根据条件获取post列表</span><br>        <span class="hljs-keyword">async</span> <span class="hljs-title function_">getPosts</span>(<span class="hljs-params">option?: I_GetPostOption</span>) &#123;<br>            <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">mainPosts</span>.<span class="hljs-title function_">getPosts</span>(option)<br>        &#125;,<br>        ...<br>    &#125;<br>        <br></code></pre></td></tr></table></figure><p>这个<strong>PostStore</strong>封装了<strong>models</strong>提供的类实例,并提供了<strong>getPosts</strong>方法来屏蔽<strong>mainPosts.getPosts</strong>的具体<strong>调用细节</strong></p><p>这样做的好处是让<strong>Store</strong>仅充当<strong>状态管理</strong>的一个角色,换句话说,<strong>Store</strong>里负责实现<strong>调用细节</strong>,<strong>models</strong>里负责<strong>逻辑的具体实现.</strong></p><p><strong>因此Store中不推荐包含任何复杂的功能的具体实现</strong></p><h3 id="使用接口约束State"><a href="#使用接口约束State" class="headerlink" title="使用接口约束State"></a><strong>使用接口约束State</strong></h3><p>上一个内容里有这么一个代码片段</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><br><span class="hljs-comment">//state约束</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PostState</span> &#123;<br>    <span class="hljs-comment">//记录总post列表</span><br>    <span class="hljs-attr">mainPosts</span>: <span class="hljs-title class_">MainPosts</span><br>    <span class="hljs-comment">//记录最新的post</span><br>    <span class="hljs-attr">latestPosts</span>: <span class="hljs-title class_">LatestPosts</span><br>    <span class="hljs-comment">//记录已经浏览过的post</span><br>    <span class="hljs-attr">visitedPosts</span>: <span class="hljs-title class_">VisitedPosts</span><br>    <span class="hljs-comment">//记录当前的post</span><br>    <span class="hljs-attr">currentPost</span>: <span class="hljs-title class_">Post</span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> usePostStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;post&#x27;</span>, &#123;<br>    <span class="hljs-attr">state</span>: (): <span class="hljs-function"><span class="hljs-params">PostState</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-comment">//记录总post列表</span><br>            <span class="hljs-attr">mainPosts</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">MainPosts</span>(),<br>            <span class="hljs-comment">//记录最新的post</span><br>            <span class="hljs-attr">latestPosts</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">LatestPosts</span>(),<br>            <span class="hljs-comment">//记录已经浏览过的post</span><br>            <span class="hljs-attr">visitedPosts</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">VisitedPosts</span>(),<br>            <span class="hljs-comment">//记录当前浏览的post</span><br>            <span class="hljs-attr">currentPost</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Post</span>()<br>        &#125;<br>    &#125;,<br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看到我们使用了<strong>PostState</strong>来约束<strong>state</strong>,这样做方便你复盘的时候对<strong>Store</strong>的结构更加清晰</p><hr><h2 id="VueRouter"><a href="#VueRouter" class="headerlink" title="VueRouter"></a>VueRouter</h2><hr><h2 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h2><h3 id="使用-models-抽象数据结构"><a href="#使用-models-抽象数据结构" class="headerlink" title="使用 models 抽象数据结构"></a><strong>使用 models 抽象数据结构</strong></h3><blockquote><p>都用 ts 了那必须得用上它强大的类型系统啊</p></blockquote><p>在实际开发中,随着数据越来越多,越来越复杂,我们一般会选择创建一个单独的文件夹(<strong>models</strong>)去抽象出一些具有良好结构的数据结构,比如说类和接口,</p><p>文件结构如下:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vim">...<br>models<br>├─ <span class="hljs-built_in">index</span>.<span class="hljs-keyword">ts</span><br>└─ modules<br>   ├─ user<br>   │  ├─ interface<br>   │  │  └─ <span class="hljs-built_in">index</span>.<span class="hljs-keyword">ts</span><br>   │  └─ class<br>   │     └─ <span class="hljs-built_in">index</span>.<span class="hljs-keyword">ts</span><br>   └─ post<br>      ├─ types<br>      │  └─ <span class="hljs-built_in">index</span>.<span class="hljs-keyword">ts</span><br>      ├─ interface<br>      │  └─ <span class="hljs-built_in">index</span>.<span class="hljs-keyword">ts</span><br>      ├─ enum<br>      │  └─ <span class="hljs-built_in">index</span>.<span class="hljs-keyword">ts</span><br>      ├─ const<br>      │  └─ <span class="hljs-built_in">index</span>.<span class="hljs-keyword">ts</span><br>      └─ class<br>         └─ <span class="hljs-built_in">index</span>.<span class="hljs-keyword">ts</span><br>...       <br></code></pre></td></tr></table></figure><h3 id="类型命名规范"><a href="#类型命名规范" class="headerlink" title="类型命名规范"></a><strong>类型命名规范</strong></h3><blockquote><p>Good naming is half the battle – 好的命名是成功的一半</p></blockquote><p>我们使用<strong>部分前缀命名</strong>来区分我们抽象的数据结构</p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>变量命名使用<strong>小驼峰命名法</strong></p><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>常量命名使用<strong>全大写的蛇形命名法(UPPER_SNAKE_CASE)</strong></p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>函数命名使用<strong>小驼峰命名法</strong></p><p>配合<strong>动词加名词</strong>的形式,如一个获取name的函数,应当命名为<strong>getName</strong></p><h4 id="类"><a href="#类" class="headerlink" title="类"></a><strong>类</strong></h4><p>类命名使用<strong>大驼峰命名法</strong></p><p>[^大驼峰命名法]: 相比小驼峰法，大驼峰法把第一个单词的首字母也大写了,例如 MyName , MyAge…</p><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a><strong>接口</strong></h4><p>接口命名以 <strong>I_</strong> 开头加上<strong>大驼峰命名法</strong>以便区分</p><p>如: I_Post , I_User , I_UserInfo</p><h4 id="待续…"><a href="#待续…" class="headerlink" title="待续…"></a><strong>待续…</strong></h4><h3 id="使用try-catch和async-await代替-then-和-catch"><a href="#使用try-catch和async-await代替-then-和-catch" class="headerlink" title="使用try-catch和async&#x2F;await代替.then()和.catch()"></a><strong>使用try-catch和async&#x2F;await代替.then()和.catch()</strong></h3><p>用法请看<a href="https://blog.csdn.net/qq_42941302/article/details/109245356">这篇博客</a></p><p>这样会使<strong>异步代码</strong>更加清晰</p><h3 id="提供封装好的方法给-Pinia-的-store-调用"><a href="#提供封装好的方法给-Pinia-的-store-调用" class="headerlink" title="提供封装好的方法给 Pinia 的 store 调用"></a><strong>提供封装好的方法给 Pinia 的 store 调用</strong></h3><p>在<strong>models</strong>封装类的时候应当提供可读性良好的方法以供 <strong>Store</strong> 的调用</p><hr><h2 id="补充概念"><a href="#补充概念" class="headerlink" title="补充概念"></a>补充概念</h2><h3 id="界面级别的组件-1"><a href="#界面级别的组件-1" class="headerlink" title="界面级别的组件"></a>界面级别的组件</h3><p>指通过 <strong>VueRouter</strong> 控制的组件,也就是你在 <strong>router</strong> 文件夹中配置的组件</p><h3 id="高复用级别的组件"><a href="#高复用级别的组件" class="headerlink" title="高复用级别的组件"></a>高复用级别的组件</h3><p>指存放在<strong>components</strong>文件夹下的被多次复用的组件,最典型的例子比如说<strong>XXX-Card</strong>组件</p>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>看看</title>
    <link href="/2023/09/16/Format-matter%E7%9A%84%E5%9D%91/"/>
    <url>/2023/09/16/Format-matter%E7%9A%84%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1 id="Front-matter的小坑"><a href="#Front-matter的小坑" class="headerlink" title="Front-matter的小坑"></a>Front-matter的小坑</h1><h2 id="各个Key-Value间要有个空格-不然会报错"><a href="#各个Key-Value间要有个空格-不然会报错" class="headerlink" title="各个Key,Value间要有个空格,不然会报错"></a>各个Key,Value间要有个空格,不然会报错</h2><span id="more"></span><p>例如:</p><p>title: xxx    ✔正确</p><p>title:xxx    ❌编译不通过</p>]]></content>
    
    
    
    <tags>
      
      <tag>Test</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
