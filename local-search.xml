<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>怎么封装一个Vue3 Ts组件库?</title>
    <link href="/2023/09/18/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AAVue3%20Ts%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    <url>/2023/09/18/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AAVue3%20Ts%E7%BB%84%E4%BB%B6%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近被封装组件库这件事折磨了两天,网上的教程大多需要再进行本地调整,于是想总结记录下搭建组件库的过程.</p><h1 id="为什么要使用Ts封装组件库"><a href="#为什么要使用Ts封装组件库" class="headerlink" title="为什么要使用Ts封装组件库?"></a>为什么要使用Ts封装组件库?</h1><p>使用Ts可以让我们在使用组件库的时候获得十分友好的类型提示,习惯使用ts是必要的!</p><h1 id="使用Vite创建一个Vue3-Ts项目"><a href="#使用Vite创建一个Vue3-Ts项目" class="headerlink" title="使用Vite创建一个Vue3+Ts项目"></a>使用Vite创建一个Vue3+Ts项目</h1><p>这里我使用的npm:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm create vite<br></code></pre></td></tr></table></figure><p>接下来选择Vue模板和Ts模板..</p><p>完成后如下:</p><p><img src="/img/%E5%B0%81%E8%A3%85Vue3Ts%E7%BB%84%E4%BB%B6%E5%BA%93/%E4%BD%BF%E7%94%A8Vite%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE.png" alt="使用Vite创建项目"></p><p>为了演示一个不带文档展示功能的组件库,我们需要精简下项目结构带来可读性</p><p>创建完项目后我们来精简下项目结构:</p><p>删去src下的components文件夹,在项目根目录创建一个packages文件夹来存放我们自己写的组件</p><p><img src="/img/%E5%B0%81%E8%A3%85Vue3Ts%E7%BB%84%E4%BB%B6%E5%BA%93/%E7%B2%BE%E7%AE%80%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png" alt="精简项目结构"></p><h1 id="组织packages下的文件夹结构"><a href="#组织packages下的文件夹结构" class="headerlink" title="组织packages下的文件夹结构"></a>组织packages下的文件夹结构</h1><p>这个文件夹在我们封装组件库时非常重要,之后我们使用vite打包的目标目录就是它</p><p>因此提前规划一个组织良好的文件结构非常重要</p><blockquote><p>这里是以我的风格来举例,也可也使用自己的风格来组织</p></blockquote><h2 id="拿Button组件举例"><a href="#拿Button组件举例" class="headerlink" title="拿Button组件举例"></a>拿Button组件举例</h2><p>看如下图:</p><p><img src="/img/%E5%B0%81%E8%A3%85Vue3Ts%E7%BB%84%E4%BB%B6%E5%BA%93/Button%E7%BB%84%E4%BB%B6%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E7%BB%93%E6%9E%84.png" alt="Button组件的文件夹结构"></p><p>我们来分析下Packages是怎么管理Button的:</p><h3 id="packages"><a href="#packages" class="headerlink" title="packages"></a>packages</h3><p>packages根目录下有两个东西,一个是Button文件夹,应该放所有与Button组件相关的内容(比如说逻辑,样式…)</p><p>另一个是index.ts文件,该文件通过各组件文件夹根目录下的index.ts用来统一导出所有组件,也是我们组件库的<strong>核心入口文件。</strong></p><h3 id="Button目录"><a href="#Button目录" class="headerlink" title="Button目录"></a>Button目录</h3><p>根目录下有一个src目录,里面放着Button.vue这个单文件组件,当然这里是举个非常简单的例子,之后应该要拆分样式与逻辑;</p><p>然后像packages一样,也有一个index.ts,用来导出Button组件。</p><h3 id="Button-vue"><a href="#Button-vue" class="headerlink" title="Button.vue"></a>Button.vue</h3><p>这里写了一个非常简单的例子,一个需要props来展示内容的按钮组件</p><p><img src="/img/%E5%B0%81%E8%A3%85Vue3Ts%E7%BB%84%E4%BB%B6%E5%BA%93/Button.vue%E9%87%8C.png" alt="Button.vue里"></p><h3 id="Button下的index-ts"><a href="#Button下的index-ts" class="headerlink" title="Button下的index.ts"></a>Button下的index.ts</h3><p>用来导出src下的Button组件,我们来看看是啥样的:</p><p><img src="/img/%E5%B0%81%E8%A3%85Vue3Ts%E7%BB%84%E4%BB%B6%E5%BA%93/Button%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84index.ts.png" alt="Button目录下的index.ts"></p><p>可以看到我们直接导入了Button.vue这个单文件组件(<strong>好方便!</strong>),然后将这个组件封装成一个单独的注册插件以便<strong>实现按需导入</strong>,最后再导出Button组件本体,这样就提供了两种方式让别人使用我们的组件。</p><h3 id="packages下的index-ts"><a href="#packages下的index-ts" class="headerlink" title="packages下的index.ts"></a>packages下的index.ts</h3><p>来看看它是怎么统一导出的.</p><p><img src="/img/%E5%B0%81%E8%A3%85Vue3Ts%E7%BB%84%E4%BB%B6%E5%BA%93/packages%E4%B8%8B%E7%9A%84index.ts.png" alt="packages下的index.ts"></p><p>在这里我们导入了Button目录下的注册组件的插件,然后再封装成了一个注册插件,并且将其作为<strong>默认导出</strong></p><blockquote><p>因为这里只有一个组件,所以作用看起来不明显,在组件多了之后我们就可以继承各组件的注册插件来封装一个全局安装的插件,就像我们使用的app.use(…)后可以全局使用组件一样，</p></blockquote><p>然后再二次导出Button下的所有内容,这也是为了实现<strong>按需导入。</strong></p><h2 id="使用我们刚封装的Button组件"><a href="#使用我们刚封装的Button组件" class="headerlink" title="使用我们刚封装的Button组件"></a>使用我们刚封装的Button组件</h2><p>接着我们再App.vue中导入一下packages下的Button看看能不能正常使用</p><p><img src="/img/%E5%B0%81%E8%A3%85Vue3Ts%E7%BB%84%E4%BB%B6%E5%BA%93/%E4%BD%BF%E7%94%A8Button%E7%BB%84%E4%BB%B6.png" alt="使用Button组件"></p><p>然后跑起来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run dev<br></code></pre></td></tr></table></figure><p>效果图如下:</p><p><img src="/img/%E5%B0%81%E8%A3%85Vue3Ts%E7%BB%84%E4%BB%B6%E5%BA%93/Button%E7%BB%84%E4%BB%B6%E7%9A%84%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="Button组件的效果图"></p><blockquote><p>这里按钮的样式有点不一样,是因为我用了脚手架自动创建的全局样式</p></blockquote><p>非常好,到这里我们已经完成了本地测试,接下来该打包,发布了。</p><h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><h2 id="安装相关依赖"><a href="#安装相关依赖" class="headerlink" title="安装相关依赖"></a>安装相关依赖</h2><p>要使用vite打包成带有d.ts的类型声明文件,我们需要安装一个vite插件: <strong>vite-plugin-dts</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i vite-plugin-dts -D<br></code></pre></td></tr></table></figure><p>主要要加上 <strong>-D</strong> 后缀来表明这是一个<strong>开发环境的依赖</strong></p><p>接着我们还需要安装@types&#x2F;node这个node标准库的类型声明库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i @types/node -D<br></code></pre></td></tr></table></figure><p>同样也需要标注 <strong>-D</strong></p><h2 id="vite-config-ts中的配置-重点"><a href="#vite-config-ts中的配置-重点" class="headerlink" title="vite.config.ts中的配置(重点!!!)"></a>vite.config.ts中的配置(重点!!!)</h2><p>这里总结了一份比较稳定的配置写法,可以根据情况自定义…</p><p><img src="/img/%E5%B0%81%E8%A3%85Vue3Ts%E7%BB%84%E4%BB%B6%E5%BA%93/vite.config.ts%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE.png" alt="vite.config.ts中.."></p><p>具体代码:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vite&quot;</span>;<br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@vitejs/plugin-vue&quot;</span>;<br><span class="hljs-keyword">import</span> dts <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vite-plugin-dts&quot;</span>;<br><span class="hljs-comment">//要用到path.resolve来处理绝对路径</span><br><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node:path&quot;</span>;<br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>    <span class="hljs-comment">//构建配置</span><br>    <span class="hljs-attr">build</span>: &#123;<br>        <span class="hljs-comment">//告诉vite以库模式构建</span><br>        <span class="hljs-attr">lib</span>: &#123;<br>            <span class="hljs-comment">//指定打包的格式,一般这三个就够用了</span><br>            <span class="hljs-attr">formats</span>: [<span class="hljs-string">&#x27;cjs&#x27;</span>,<span class="hljs-string">&#x27;es&#x27;</span>,<span class="hljs-string">&#x27;umd&#x27;</span>], <br>            <span class="hljs-comment">//入口文件,注意要使用绝对路径</span><br>            <span class="hljs-attr">entry</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;./packages/index.ts&quot;</span>),<br>            <span class="hljs-comment">//库的名称,用来区分用的</span><br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tyee&quot;</span>,<br>            <span class="hljs-comment">//打包出来的文件名,注意这里要和入口文件一样,因为d.ts是基于同名文件的</span><br>            <span class="hljs-attr">fileName</span>: <span class="hljs-string">&quot;index&quot;</span>,<br>        &#125;,<br>        <span class="hljs-comment">//rollup配置项</span><br>        <span class="hljs-attr">rollupOptions</span>: &#123;<br>            <span class="hljs-comment">//要处理的依赖</span><br>            <span class="hljs-attr">external</span>: [<span class="hljs-string">&quot;vue&quot;</span>],<br>            <span class="hljs-attr">output</span>: &#123;<br>                <span class="hljs-attr">globals</span>: &#123;<br>                    <span class="hljs-attr">vue</span>: <span class="hljs-string">&quot;Vue&quot;</span>,<br>                &#125;,<br>            &#125;,<br>        &#125;,<br>    &#125;,<br>    <span class="hljs-comment">//配置插件</span><br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-title function_">vue</span>(),<br>        <span class="hljs-comment">//使用dts插件</span><br>        <span class="hljs-title function_">dts</span>(&#123;<br>            <span class="hljs-comment">// 以packages文件夹作为入口,构建d.ts文件,注意要使用绝对路径</span><br>            <span class="hljs-attr">include</span>: path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;./packages&quot;</span>),<br>        &#125;),<br>    ],<br>&#125;);<br><br></code></pre></td></tr></table></figure><h2 id="打包试试"><a href="#打包试试" class="headerlink" title="打包试试"></a>打包试试</h2><p>写好了配置就到了打包环节</p><p>运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run build<br></code></pre></td></tr></table></figure><p>打包完出现了dist目录,这就是我们封装的组件库:</p><p><img src="/img/%E5%B0%81%E8%A3%85Vue3Ts%E7%BB%84%E4%BB%B6%E5%BA%93/%E6%89%93%E5%8C%85%E5%90%8E%E7%9A%84%E7%BB%84%E4%BB%B6%E5%BA%93.png" alt="打包后的组件库"></p><p>可以看到了已经生成了对应的d.ts的类型声明文件,这样使用组件的时候就可以获得类型提示了!</p><h2 id="测试打包后的组件库"><a href="#测试打包后的组件库" class="headerlink" title="测试打包后的组件库"></a>测试打包后的组件库</h2><p>到这一步马上就要成功了,让我们试试能不能成功引入dist下的组件</p><p><img src="/img/%E5%B0%81%E8%A3%85Vue3Ts%E7%BB%84%E4%BB%B6%E5%BA%93/%E5%BC%95%E5%85%A5dist%E4%B8%8B%E7%9A%84%E7%BB%84%E4%BB%B6.png" alt="引入dist下的组件"></p><p><strong>Vue,启动!</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run dev<br></code></pre></td></tr></table></figure><p><img src="/img/%E5%B0%81%E8%A3%85Vue3Ts%E7%BB%84%E4%BB%B6%E5%BA%93/%E5%BC%95%E5%85%A5dist%E6%88%90%E5%8A%9F.png" alt="引入dist成功"></p><h2 id="小坑"><a href="#小坑" class="headerlink" title="小坑"></a>小坑</h2><p><strong>如果你的组件使用了任何样式,那么打包后会被打包成一个独立的css文件,因此外部使用的时候需要额外引入包内的css文件,不然样式无法生效</strong></p><h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a><strong>发布</strong></h1><p>这里不详细说明<a href="https://zhuanlan.zhihu.com/p/147804428">使用npm发布</a>的步骤,只简单介绍一下怎么配置<strong>package.json</strong></p><blockquote><p>小坑: 发布时要切换至<strong>npm官方源</strong>,不然无法发布的,这里推荐<a href="https://blog.csdn.net/qq_38872934/article/details/105706101">nrm</a>这个工具来换源</p></blockquote><p><img src="/img/%E5%B0%81%E8%A3%85Vue3Ts%E7%BB%84%E4%BB%B6%E5%BA%93/%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8Dpackage.json.png" alt="简单介绍package.json.png"></p><p>这里提供具体代码,可以根据需要自行修改</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xxxx&quot;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;private&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.1.4&quot;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;module&quot;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;main&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./dist/index.cjs&quot;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;umd:main&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./dist/index.umd.js&quot;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./dist/index.js&quot;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;types&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./dist/index.d.ts&quot;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><br>    <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vite&quot;</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-tsc &amp;&amp; vite build&quot;</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-attr">&quot;preview&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vite preview&quot;</span><br><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <br>    <span class="hljs-attr">&quot;tyee-cocle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^0.1.4&quot;</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-attr">&quot;vue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.3.4&quot;</span><br><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><br>    <span class="hljs-attr">&quot;@types/node&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^20.6.2&quot;</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-attr">&quot;@vitejs/plugin-vue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.2.3&quot;</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-attr">&quot;typescript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^5.0.2&quot;</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-attr">&quot;vite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.4.5&quot;</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-attr">&quot;vite-plugin-dts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.5.3&quot;</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-attr">&quot;vue-tsc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.8.5&quot;</span><br><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;files&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br><br>    <span class="hljs-string">&quot;dist&quot;</span><br><br>  <span class="hljs-punctuation">]</span><br><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><blockquote><p>当然json文件里不能写注释,同时<a href="https://jdf2e.github.io/jdc_fe_guide/docs/npm/index/#:~:text=npm%E5%8C%85%E5%90%8D%E7%A7%B0%E8%A7%84%E8%8C%83%20%E5%8C%85%E5%90%8D%E7%A7%B0%E8%A7%84%E8%8C%83%20%E6%9C%80%E5%A4%9A%E4%B8%BA%20214%20%E4%B8%AA%E5%AD%97%E7%AC%A6%E3%80%82,%E5%85%A8%E9%83%A8%E5%B0%8F%E5%86%99%EF%BC%8C%E5%A4%9A%E5%AD%97%E6%AF%8D%E5%BB%BA%E8%AE%AE%E7%94%A8%E4%B8%AD%E6%A8%AA%E7%BA%BF-%E5%88%86%E9%9A%94%EF%BC%8C%E4%B8%8D%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8%E7%82%B9.%E6%88%96%E4%B8%8B%E5%88%92%E7%BA%BF_%E5%88%86%E9%9A%94%E3%80%82%20%E4%B8%8D%E5%85%81%E8%AE%B8%E4%BD%BF%E7%94%A8%E6%9F%90%E4%BA%9B%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%EF%BC%9A%E2%80%9C~%E2%80%99%21%20%28%29%2A%E2%80%9D%29%E2%80%99%EF%BC%8C%E4%B8%8D%E5%85%81%E8%AE%B8%E6%9C%89%E7%A9%BA%E6%A0%BC%EF%BC%8C%E4%B8%8D%E5%85%81%E8%AE%B8%E4%BD%BF%E7%94%A8node_modules%20%E6%88%96%20favicon.ico%E7%AD%89%E7%89%B9%E6%AE%8A%E5%90%8D%E5%AD%97%E3%80%82">包名要满足一定的格式</a></p></blockquote><h2 id="小坑-1"><a href="#小坑-1" class="headerlink" title="小坑"></a>小坑</h2><p><strong>注意这里有个小问题,那就是dependencies下有我们自己的包,这是测试的时候引入的,发布时要注意删除</strong></p><p>当项目越来越大,开发组件所需的依赖越来越多时,建议单独创建一个项目来专门发布dist目录的包,因为dist目录已经包含了所需的依赖包,不必在package.json下添加依赖。测试组件可以在开发组件的那个项目进行。</p><h2 id="测试发布的包"><a href="#测试发布的包" class="headerlink" title="测试发布的包"></a><strong>测试发布的包</strong></h2><p><img src="/img/%E5%B0%81%E8%A3%85Vue3Ts%E7%BB%84%E4%BB%B6%E5%BA%93/%E6%B5%8B%E8%AF%95%E8%87%AA%E5%B7%B1%E5%8F%91%E5%B8%83%E7%9A%84%E5%8C%85.png" alt="测试自己发布的包"></p><p>可以看到成功了!</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VueQuill的改造</title>
    <link href="/2023/09/17/%E5%B0%81%E8%A3%85VueQuill/"/>
    <url>/2023/09/17/%E5%B0%81%E8%A3%85VueQuill/</url>
    
    <content type="html"><![CDATA[<h1 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h1><blockquote><p>富文本编辑器是一种用于编辑和格式化文本的工具，它提供了丰富的功能和选项，使用户能够轻松地添加和编辑文字、图像、链接和其他多媒体元素。市面上最常见的富文本编辑器比如说Word..</p></blockquote><p>最近使用Vue3+Ts在开发一个论坛项目时,需要使用到富文本编辑器的插入代码块和图片的功能,</p><p>于是上网溜了一圈了找了像wangEditor这样的强大的开源富文本编辑器,兴冲冲地npm下来后发现存在Ts类型声明文件的错误,上issue找了一圈硬是没找到解决办法,猜测可能是d.ts的类型声明文件的缺失。</p><p>之后找啊找,发现了一个叫Vue-Quill的开源富文本编辑器,实际配置下来发现可以兼容我的ts项目,于是就打算用它了！</p><p>不过Vue-Quill的核心功能较简单,需要自己配置拓展,而且我看了大部分的拓展都是用js写的,没有相应的.d.ts类型声明文件…</p><p>无奈之下,一开始我是打算自己从0开始实现一个富文本编辑器的….  后面发现**巨多坑(极多的边界情况需要考虑)**。</p><p>没办法,自己基于Vue-Quill封装一个吧.</p><h1 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h1><h2 id="在Vue中使用原生DOM进行拓展"><a href="#在Vue中使用原生DOM进行拓展" class="headerlink" title="在Vue中使用原生DOM进行拓展"></a>在Vue中使用原生DOM进行拓展</h2>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>富文本编辑器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端规范(补充中)</title>
    <link href="/2023/09/17/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/"/>
    <url>/2023/09/17/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1 id="Sends-FrontEnd’s-Best-Practice"><a href="#Sends-FrontEnd’s-Best-Practice" class="headerlink" title="Sends-FrontEnd’s Best Practice"></a><strong>Sends-FrontEnd’s Best Practice</strong></h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文旨在<strong>统一开发规范</strong>,提供最佳实践和高效的前端开发环境</p><blockquote><p>详细技术细节请看官方文档,本文只提供规范以及部分关键概念</p><p>注:本文引用了大量官方文档的链接👍</p></blockquote><h2 id="统一技术栈"><a href="#统一技术栈" class="headerlink" title="统一技术栈"></a>统一技术栈</h2><p><a href="https://cn.vuejs.org/">Vue3</a>(主流的渐进式前端框架) + <a href="https://cn.vitejs.dev/">Vite</a>(下一代前端构建工具) + <a href="https://pinia.vuejs.org/zh/">Pinia</a>(符合直觉的 Vue.js 状态管理库) + <a href="https://router.vuejs.org/zh/">VueRouter</a>(Vue.js 的官方路由) + <a href="https://typescript.bootcss.com/">TypeScript</a>(具有强大,灵活的类型系统的 js 超集)</p><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><blockquote><p>是的，我们需要一些规范</p></blockquote><h3 id="一些约定"><a href="#一些约定" class="headerlink" title="一些约定"></a><strong>一些约定</strong></h3><ol><li>async函数调用链顶层使用try-catch</li></ol><p>如果有多层async函数调用,请在最顶层的调用处包裹try-catch语句,这有利于大伙排查错误</p><p><strong>请确保任何与API请求有关的async函数调用链都有try-catch处理,不然debug火葬场</strong>!!!</p><hr><ol start="2"><li>不要在App.vue(根组件)中使用顶层await</li></ol><p><a href="https://cn.vuejs.org/api/sfc-script-setup.html#top-level-await">顶层await</a>使用条件是父组件中存在Suspense内置组件,但是App.vue这样的根组件会被作为作为创建Vue应用的根组件,无法使用Suspense!</p><p>在<strong>App.vue中使用顶层await</strong>会导致界面加载不出来!</p><hr><ol start="3"><li>初始化步骤应当封装在插件</li></ol><p>将<strong>main.ts</strong>里的初始化工作<strong>按照功能点</strong>封装成<strong>模块化</strong>的插件并存放至<strong>plugins</strong>文件夹,这样更清晰!</p><hr><ol start="4"><li><a href="https://cn.vuejs.org/guide/extras/composition-api-faq.html">使用组合式API</a></li></ol><p>逻辑的盛宴,强烈推荐!</p><p><a href="https://cn.vuejs.org/guide/extras/composition-api-faq.html#why-composition-api">为什么要有组合式API?</a></p><hr><ol start="5"><li><a href="https://cn.vuejs.org/api/sfc-script-setup.html">使用<code>&lt;script setup&gt;</code>来写组件逻辑</a></li></ol><p>方便又清晰!</p><p><a href="https://cn.vuejs.org/api/sfc-script-setup.html#script-setup">看这里</a></p><hr><ol start="6"><li>使用try-catch和async&#x2F;await代替.then()和.catch()</li></ol><p>用法请看<a href="https://blog.csdn.net/qq_42941302/article/details/109245356">这篇博客</a></p><p>神说:”要用同步的方式编写异步代码，这样会使异步代码更加清晰”</p><hr><ol start="7"><li>封装models</li></ol><p>在<strong>models</strong>封装类及其具体实现<br>在其他地方调用<strong>models</strong>封装好的行为</p><hr><ol start="8"><li>及时重构</li></ol><p>我们写功能时,一开始或许是粗糙的实现,这时候我们先不着急优化,我们可以先把功能写完。</p><p>写完之后再考虑优化重构,这时候我们可以从一个更高的角度来看这段代码,更有利于重构!</p><p><strong>切记不可心急!</strong></p><p><strong>切记不可心急!</strong></p><p><strong>切记不可心急!</strong></p><hr><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a><strong>组件</strong></h3><blockquote><p>好了,我现在知道谁是Vue开发中最重要的了</p></blockquote><h4 id="类型约定"><a href="#类型约定" class="headerlink" title="类型约定:"></a>类型约定:</h4><p>统一使用<a href="https://cn.vuejs.org/guide/scaling-up/sfc.html#why-sfc">单文件组件(SFC)</a>的形式</p><h4 id="组件类型"><a href="#组件类型" class="headerlink" title="组件类型:"></a>组件类型:</h4><ol><li>界面级别的组件</li></ol><blockquote><p>或者说一个路由界面的<strong>根组件</strong></p></blockquote><p>由若干个<strong>非界面级别组件</strong>构成</p><p>以<strong>XXX-View.vue</strong>来命名(其实是为了附和Volar的multi-word检查)</p><p>如 <strong>Home-View.vue</strong> , <strong>User-View.vue</strong>等等…</p><ol start="2"><li>非界面级别的组件</li></ol><blockquote><p>或者说一个界面级组件的<strong>功能实现组件</strong></p></blockquote><p>以<strong>相关性</strong>来命名</p><p>比如说有一个叫<strong>Post-Comment.vue</strong>的实现评论区的组件</p><p>现在我们想给评论区添加一个卡片组件来展示评论,那么我们应该这样命名:<strong>Post-Comment-Card.vue</strong></p><p>可以看到,这个组件的名字是<strong>紧接着</strong>其相关组件的名字的,这样具有良好的<strong>可读性</strong></p><h4 id="怎么命名"><a href="#怎么命名" class="headerlink" title="怎么命名?:"></a>怎么命名?:</h4><p>约定使用<strong>多单词</strong>&#x2F;<strong>multi-word</strong>命名组件,多个单词间以-分开</p><p>如 <strong>Post-Item.vue</strong> , <strong>User-Card.vue</strong>等等…</p><h4 id="组件怎么封装"><a href="#组件怎么封装" class="headerlink" title="组件怎么封装?:"></a><strong>组件怎么封装?</strong>:</h4><p>应当遵循<a href="https://cn.vuejs.org/guide/components/props.html#one-way-data-flow">单向数据流动</a>。</p><p>除非是极其密切相关的组件:<br>例如<strong>编辑器组件可以分成编辑区和编辑内容展示区</strong>那么这时候这两个子组件都需要用到编辑器这个父组件的内容,并且编辑区需要修改内容,这时候可以使用<strong>reactive对象作为props传入子组件</strong>方便修改。</p><h4 id="组件放哪个文件夹"><a href="#组件放哪个文件夹" class="headerlink" title="组件放哪个文件夹?:"></a><strong>组件放哪个文件夹?</strong>:</h4><p>一般来说,使用 Vue 官方脚手架(create-vue)创建项目时时,初始会带有这两个文件夹:<strong>components</strong>和<strong>views</strong>.</p><p>接下来我们来区分一下这两个文件夹应该分别存放什么类型的组件</p><h5 id="components"><a href="#components" class="headerlink" title="components:"></a>components:</h5><p>这个文件夹应当存放可被整个应用多次<strong>复用</strong>(次数至少大于 1)的组件:如 xxx-Card.vue。</p><h5 id="views"><a href="#views" class="headerlink" title="views:"></a>views:</h5><p>这个文件夹应当存放<a href="###%E7%95%8C%E9%9D%A2%E7%BA%A7%E5%88%AB%E7%9A%84%E7%BB%84%E4%BB%B6"><strong>界面级别的组件</strong></a>。</p><h3 id="渲染锁"><a href="#渲染锁" class="headerlink" title="渲染锁"></a>渲染锁</h3><blockquote><p>“如果没有渲染锁,那么我将浪费大量的时间debug!”  —麦克阿瑟</p></blockquote><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>渲染锁一种对<strong>模板引用异步数据</strong>的解决方案。<br>它和<a href="https://juejin.cn/post/7082997603905830920">全局事件总线</a>差不多,都是基于已有技术总结下来的一种解决方案.</p><h4 id="为什么要用"><a href="#为什么要用" class="headerlink" title="为什么要用?"></a>为什么要用?</h4><p>在我们使用Vue开发时,我们往往需要使用例如<strong>axios,fetch,xhr</strong>等异步工具来发异步请求给服务器来获取服务器返回的数据,</p><p>如果我们此时我们在Vue的模板中引用了异步数据,并且没有做等待异步操作,那么运行时就非常容易出现引用undefined.xxx的情况,例如引用异步数据中对象的属性(因为此时异步数据还未被服务器返回,处于undefined状态).为了解决这个问题,我们可以使用<strong>渲染锁(Render lock)</strong>.</p><h4 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用?"></a>怎么用?</h4><blockquote><p>Talk is cheap, show me your code.</p></blockquote><p><img src="/assets/%E6%B8%B2%E6%9F%93%E9%94%81demo.png" alt="渲染锁demo.png"></p><p>可以看到我们在组件的根节点加了个<strong>v-if</strong>来异步渲染组件,这样可以保证在数据获取前Vue不会对模板中的undefined进行引用.</p><p><strong>注意不能使用v-show来实现渲染锁</strong>,因为<strong>v-show会被渲染</strong>,只是加上了一个display:none的style。</p><h2 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h2><blockquote><p>非常好菠萝🍍,使我威优开发效率提升。</p></blockquote><h3 id="使用-stores-管理"><a href="#使用-stores-管理" class="headerlink" title="使用 stores 管理"></a><strong>使用 stores 管理</strong></h3><p>使用 Pinia 时应当将各<strong>Store</strong>放入<strong>stores</strong>目录下的<strong>modules</strong>目录<br>并在<strong>stores</strong>的根目录下的<strong>index.ts</strong>中定义一个全局性质的状态管理,封装需要<strong>使用多个 Store</strong>的行为<br>或者用来重导出也是可以的。</p><p>文件树如下:</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">...</span><br>├─stores<br>│  ├─modules<br>│  │  ├─post<br>│  │  ├─user<br>│  │  └─...<br>│  └─index.ts<br><span class="hljs-meta prompt_">...</span><br></code></pre></td></tr></table></figure><p><strong>Tip: 不仅stores如此,其他可分为模块的文件夹都建议这么写</strong></p><h3 id="命名为useXXXStore"><a href="#命名为useXXXStore" class="headerlink" title="命名为useXXXStore"></a><strong>命名为useXXXStore</strong></h3><p>store的定义导出函数约定这样命名:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> usePostStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;post&#x27;</span>, &#123;...&#125;)<br>                                                 <br></code></pre></td></tr></table></figure><p>这是来自官方文档的约定哦!</p><h3 id="Store里应该做什么"><a href="#Store里应该做什么" class="headerlink" title="Store里应该做什么?"></a>Store里应该做什么?</h3><blockquote><p>屏蔽<strong>实现细节</strong>,封装<strong>调用逻辑</strong>!</p></blockquote><h4 id="封装models层的调用逻辑"><a href="#封装models层的调用逻辑" class="headerlink" title="封装models层的调用逻辑"></a>封装models层的调用逻辑</h4><p>Store里应该负责接管<strong>models</strong>提供的<strong>封装好的屏蔽实现细节的方法</strong>,并基于实际情况进行<strong>调用封装</strong>。</p><p>看下面这段代码:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//state约束</span><br><span class="hljs-comment">//这里应该放到models/modules/store/post/interface里,为了方便展示直接写在这里了</span><br><span class="hljs-keyword">interface</span> I_PostStoreState &#123;<br>    <span class="hljs-comment">//记录总post列表</span><br>    <span class="hljs-attr">mainPosts</span>: <span class="hljs-title class_">MainPosts</span><br>    <span class="hljs-comment">//记录最新的post</span><br>    <span class="hljs-attr">latestPosts</span>: <span class="hljs-title class_">LatestPosts</span><br>    <span class="hljs-comment">//记录已经浏览过的post</span><br>    <span class="hljs-attr">visitedPosts</span>: <span class="hljs-title class_">VisitedPosts</span><br>    <span class="hljs-comment">//记录当前的post</span><br>    <span class="hljs-attr">currentPost</span>: <span class="hljs-title class_">Post</span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> usePostStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;post&#x27;</span>, &#123;<br>    <span class="hljs-attr">state</span>: (): <span class="hljs-function"><span class="hljs-params">I_PostStoreState</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-comment">//记录总post列表</span><br>            <span class="hljs-attr">mainPosts</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">MainPosts</span>(),<br>            <span class="hljs-comment">//记录最新的post</span><br>            <span class="hljs-attr">latestPosts</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">LatestPosts</span>(),<br>            <span class="hljs-comment">//记录已经浏览过的post</span><br>            <span class="hljs-attr">visitedPosts</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">VisitedPosts</span>(),<br>            <span class="hljs-comment">//记录当前浏览的post</span><br>            <span class="hljs-attr">currentPost</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Post</span>()<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">actions</span>: &#123;<br>        <span class="hljs-comment">//根据条件获取post列表</span><br>        <span class="hljs-keyword">async</span> <span class="hljs-title function_">getPosts</span>(<span class="hljs-params">option?: I_GetPostOption</span>) &#123;<br>            <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">mainPosts</span>.<span class="hljs-title function_">getPosts</span>(option)<br>        &#125;,<br>        ...<br>    &#125;<br>        <br></code></pre></td></tr></table></figure><p>这个<strong>PostStore</strong>封装了<strong>models</strong>提供的类实例,并提供了<strong>getPosts</strong>方法来屏蔽<strong>mainPosts.getPosts</strong>的具体<strong>调用细节</strong>。</p><p>由于上面调用细节过于简单,所以直接原样传递了option参数…</p><p>但是如果我想根据其他Store的状态来限制getPosts,<br>这时候就可以避免干涉models的实现,直接在当前store的方法里<strong>补充调用细节</strong>即可;</p><p>这样做的好处是让<strong>Store</strong>仅充当<strong>非侵入式状态管理</strong>的角色;<br>换句话说: <strong>Store</strong>里负责实现<strong>调用细节</strong>,<strong>models</strong>里负责<strong>逻辑的具体实现</strong>。</p><p><strong>因此Store中不推荐包含任何复杂的功能的具体实现!</strong></p><h3 id="使用接口约束State"><a href="#使用接口约束State" class="headerlink" title="使用接口约束State"></a><strong>使用接口约束State</strong></h3><p>上一个内容里有这么一个代码片段</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//state约束</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PostState</span> &#123;<br>    <span class="hljs-comment">//记录总post列表</span><br>    <span class="hljs-attr">mainPosts</span>: <span class="hljs-title class_">MainPosts</span><br>    <span class="hljs-comment">//记录最新的post</span><br>    <span class="hljs-attr">latestPosts</span>: <span class="hljs-title class_">LatestPosts</span><br>    <span class="hljs-comment">//记录已经浏览过的post</span><br>    <span class="hljs-attr">visitedPosts</span>: <span class="hljs-title class_">VisitedPosts</span><br>    <span class="hljs-comment">//记录当前的post</span><br>    <span class="hljs-attr">currentPost</span>: <span class="hljs-title class_">Post</span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> usePostStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;post&#x27;</span>, &#123;<br>    <span class="hljs-comment">//注意这里的state写成箭头函数,这是官方文档的最佳实践</span><br>    <span class="hljs-attr">state</span>: (): <span class="hljs-function"><span class="hljs-params">PostState</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-comment">//记录总post列表</span><br>            <span class="hljs-attr">mainPosts</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">MainPosts</span>(),<br>            <span class="hljs-comment">//记录最新的post</span><br>            <span class="hljs-attr">latestPosts</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">LatestPosts</span>(),<br>            <span class="hljs-comment">//记录已经浏览过的post</span><br>            <span class="hljs-attr">visitedPosts</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">VisitedPosts</span>(),<br>            <span class="hljs-comment">//记录当前浏览的post</span><br>            <span class="hljs-attr">currentPost</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Post</span>()<br>        &#125;<br>    &#125;,<br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看到我们使用了<strong>PostState</strong>来约束<strong>state</strong>,这样做方便你复盘的时候对<strong>Store</strong>的结构更加清晰</p><h2 id="VueRouter"><a href="#VueRouter" class="headerlink" title="VueRouter"></a>VueRouter</h2><blockquote><p>任何人都需要一个Router</p></blockquote><h3 id="使用-import-…-代替在顶部引入组件-路由懒加载"><a href="#使用-import-…-代替在顶部引入组件-路由懒加载" class="headerlink" title="使用()&#x3D;&gt;import(…)代替在顶部引入组件(路由懒加载)"></a><strong>使用()&#x3D;&gt;import(…)代替在顶部引入组件(路由懒加载)</strong></h3><p><a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html#%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD">具体看这里!</a></p><h2 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h2><blockquote><p>最喜欢的一集</p></blockquote><h3 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a><strong>学习资料</strong></h3><ol><li>ts视频教程 <a href="https://www.bilibili.com/video/BV1vX4y1s776">https://www.bilibili.com/video/BV1vX4y1s776</a></li><li>ts简单教程 <a href="https://juejin.cn/post/7092415149809598500">https://juejin.cn/post/7092415149809598500</a></li><li>ts详细教程 <a href="https://juejin.cn/post/7088304364078497800">https://juejin.cn/post/7088304364078497800</a></li><li>ts类型体操练习 <a href="https://github.com/type-challenges/type-challenges">https://github.com/type-challenges/type-challenges</a></li></ol><h3 id="内置类型工具"><a href="#内置类型工具" class="headerlink" title="内置类型工具"></a><strong>内置类型工具</strong></h3><p>TypeScript 提供了一系列的内置类型工具，也被称为工具类型（Utility Types），以方便开发者在不改变原有数据结构的前提下，通过预定义的类型转换来创建新的类型。这些工具类型在 <code>lib.es5.d.ts</code> 文件中有定义。以下是一些常用的 TypeScript 内置工具类型：</p><h4 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h4><ol><li><p><strong>Partial&lt;T&gt;</strong>: 将类型 <code>T</code> 的所有属性变为可选的。</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Todo</span> &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">description</span>: <span class="hljs-built_in">string</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateTodo</span>(<span class="hljs-params">todo: Todo, fieldsToUpdate: Partial&lt;Todo&gt;</span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123; ...todo, ...fieldsToUpdate &#125;;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>Required&lt;T&gt;</strong>: 与 <code>Partial</code> 相反，将类型 <code>T</code> 的所有属性变为必选的。</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Props</span> &#123;<br>  a?: <span class="hljs-built_in">number</span>;<br>  b?: <span class="hljs-built_in">string</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">obj</span>: <span class="hljs-title class_">Required</span>&lt;<span class="hljs-title class_">Props</span>&gt; = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">&quot;String&quot;</span> &#125;;<br></code></pre></td></tr></table></figure></li><li><p><strong>Readonly&lt;T&gt;</strong>: 将类型 <code>T</code> 的所有属性设置为只读的。</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Todo</span> &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">todo</span>: <span class="hljs-title class_">Readonly</span>&lt;<span class="hljs-title class_">Todo</span>&gt; = &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;Delete inactive users&quot;</span>,<br>&#125;;<br><br>todo.<span class="hljs-property">title</span> = <span class="hljs-string">&quot;Hello&quot;</span>; <span class="hljs-comment">// Error: cannot reassign a readonly property</span><br></code></pre></td></tr></table></figure></li><li><p><strong>Record&lt;K, T&gt;</strong>: 构造一个对象类型，其属性键为 <code>K</code>，属性值为 <code>T</code>。</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PageInfo</span> &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;<br>&#125;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Page</span> = <span class="hljs-string">&quot;home&quot;</span> | <span class="hljs-string">&quot;about&quot;</span> | <span class="hljs-string">&quot;contact&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">x</span>: <span class="hljs-title class_">Record</span>&lt;<span class="hljs-title class_">Page</span>, <span class="hljs-title class_">PageInfo</span>&gt; = &#123;<br>  <span class="hljs-attr">home</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;Home&quot;</span> &#125;,<br>  <span class="hljs-attr">about</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;About&quot;</span> &#125;,<br>  <span class="hljs-attr">contact</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;Contact&quot;</span> &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><strong>Pick&lt;T, K&gt;</strong>: 从类型 <code>T</code> 中挑选一些属性 <code>K</code> 来构造类型。</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Todo</span> &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">description</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">completed</span>: <span class="hljs-built_in">boolean</span>;<br>&#125;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">TodoPreview</span> = <span class="hljs-title class_">Pick</span>&lt;<span class="hljs-title class_">Todo</span>, <span class="hljs-string">&quot;title&quot;</span> | <span class="hljs-string">&quot;completed&quot;</span>&gt;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">todo</span>: <span class="hljs-title class_">TodoPreview</span> = &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;Clean room&quot;</span>,<br>  <span class="hljs-attr">completed</span>: <span class="hljs-literal">false</span>,<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><strong>Omit&lt;T, K&gt;</strong>: 从类型 <code>T</code> 中剔除一些属性 <code>K</code>，构造一个新类型。</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Todo</span> &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">description</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">completed</span>: <span class="hljs-built_in">boolean</span>;<br>&#125;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">TodoPreview</span> = <span class="hljs-title class_">Omit</span>&lt;<span class="hljs-title class_">Todo</span>, <span class="hljs-string">&quot;description&quot;</span>&gt;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">todo</span>: <span class="hljs-title class_">TodoPreview</span> = &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;Clean room&quot;</span>,<br>  <span class="hljs-attr">completed</span>: <span class="hljs-literal">false</span>,<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><strong>Exclude&lt;T, U&gt;</strong>: 从类型 <code>T</code> 中排除所有可以赋值给 <code>U</code> 的属性，构造一个新类型。</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">T0</span> = <span class="hljs-title class_">Exclude</span>&lt;<span class="hljs-string">&quot;a&quot;</span> | <span class="hljs-string">&quot;b&quot;</span> | <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>&gt;; <span class="hljs-comment">// &quot;b&quot; | &quot;c&quot;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>Extract&lt;T, U&gt;</strong>: 提取类型 <code>T</code> 中可以赋值给 <code>U</code> 的类型，构造一个新类型。</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">T0</span> = <span class="hljs-title class_">Extract</span>&lt;<span class="hljs-string">&quot;a&quot;</span> | <span class="hljs-string">&quot;b&quot;</span> | <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;a&quot;</span> | <span class="hljs-string">&quot;f&quot;</span>&gt;; <span class="hljs-comment">// &quot;a&quot;</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="不太常用"><a href="#不太常用" class="headerlink" title="不太常用"></a>不太常用</h4><ol><li><p><strong>NonNullable&lt;T&gt;</strong>: 从类型 <code>T</code> 中排除 <code>null</code> 和 <code>undefined</code>。</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">T0</span> = <span class="hljs-title class_">NonNullable</span>&lt;<span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span> | <span class="hljs-literal">undefined</span>&gt;; <span class="hljs-comment">// string | number</span><br></code></pre></td></tr></table></figure></li><li><p><strong>ReturnType&lt;T&gt;</strong>: 获取函数类型 <code>T</code> 的返回类型。</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">T0</span> = <span class="hljs-title class_">ReturnType</span>&lt;<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">string</span>&gt;; <span class="hljs-comment">// string</span><br></code></pre></td></tr></table></figure></li><li><p><strong>Parameters&lt;T&gt;:获取函数类型的参数类型</strong></p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Props</span> = <span class="hljs-title class_">Parameters</span>&lt;<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">string</span>&gt; <span class="hljs-comment">// []</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Props1</span> = <span class="hljs-title class_">Parameters</span>&lt;<span class="hljs-function">(<span class="hljs-params">data: <span class="hljs-built_in">string</span></span>) =&gt;</span> <span class="hljs-built_in">void</span>&gt; <span class="hljs-comment">// [string]</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Props2</span> = <span class="hljs-title class_">Parameters</span>&lt;<span class="hljs-built_in">any</span>&gt;; <span class="hljs-comment">// unknown[]</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Props3</span> = <span class="hljs-title class_">Parameters</span>&lt;<span class="hljs-built_in">never</span>&gt;; <span class="hljs-comment">// never</span><br></code></pre></td></tr></table></figure></li><li><p><strong>InstanceType&lt;T&gt;</strong>: 获取构造函数类型 <code>T</code> 的实例类型。</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> &#123;<br>  x = <span class="hljs-number">0</span>;<br>  y = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">T0</span> = <span class="hljs-title class_">InstanceType</span>&lt;<span class="hljs-keyword">typeof</span> C&gt;; <span class="hljs-comment">// C</span><br></code></pre></td></tr></table></figure></li><li><p><strong>ThisParameterType</strong>: 从函数类型中提取 <code>this</code> 的类型。</p></li><li><p><strong>OmitThisParameter</strong>: 从函数类型中移除 <code>this</code> 参数。</p></li><li><p><strong>ThisType&lt;T&gt;</strong>: 这个工具不返回转换后的类型，而是用于上下文中的 <code>this</code> 类型的标记。</p></li></ol><h3 id="封装类"><a href="#封装类" class="headerlink" title="封装类"></a><strong>封装类</strong></h3><h4 id="内部成员命名"><a href="#内部成员命名" class="headerlink" title="内部成员命名"></a>内部成员命名</h4><p>private私有成员加上<strong>一个</strong>下划线_前缀同时遵循小驼峰,如: _id</p><p>public公开成员遵循小驼峰即可.</p><h3 id="使用-models-抽象数据结构"><a href="#使用-models-抽象数据结构" class="headerlink" title="使用 models 抽象数据结构"></a><strong>使用 models 抽象数据结构</strong></h3><blockquote><p>都用 ts 了那必须得用上它强大的类型系统啊</p></blockquote><p>在实际开发中,随着数据越来越多,越来越复杂,我们一般会选择创建一个单独的文件夹(<strong>models</strong>)去抽象出一些具有良好结构的数据结构,比如说类和接口.</p><p><strong>请确保所有相关定义都在models下,不要为了图方便把定义写到.vue文件内,除非你非常确定它只会在这里用到!</strong></p><p>某个项目的models结构如下:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vim">...<br>models<br>├─ <span class="hljs-built_in">index</span>.<span class="hljs-keyword">ts</span><br>└─ modules<br>   ├─ user<br>   │  ├─ interface<br>   │  │  └─ <span class="hljs-built_in">index</span>.<span class="hljs-keyword">ts</span><br>   │  └─ class<br>   │     └─ <span class="hljs-built_in">index</span>.<span class="hljs-keyword">ts</span><br>   └─ post<br>      ├─ <span class="hljs-built_in">type</span><br>      │  └─ <span class="hljs-built_in">index</span>.<span class="hljs-keyword">ts</span><br>      ├─ interface<br>      │  └─ <span class="hljs-built_in">index</span>.<span class="hljs-keyword">ts</span><br>      ├─ enum<br>      │  └─ <span class="hljs-built_in">index</span>.<span class="hljs-keyword">ts</span><br>      ├─ const<br>      │  └─ <span class="hljs-built_in">index</span>.<span class="hljs-keyword">ts</span><br>      └─ class<br>         └─ <span class="hljs-built_in">index</span>.<span class="hljs-keyword">ts</span><br>...       <br></code></pre></td></tr></table></figure><p>可以看到models下有一个index.ts文件和modules目录:</p><p>index.ts用来统一各导出的或者定义一些全局性质的配置;</p><p>modules目录用来分层的: 比如说上面例子中的user和post两个层级,每个层级下还具体细分了各定义的类型!</p><h3 id="API层"><a href="#API层" class="headerlink" title="API层"></a><strong>API层</strong></h3><blockquote><p>不调API就无法生存!!!</p></blockquote><p><strong>1. 什么是API层?</strong></p><p>一个负责<strong>组织,抽象,封装axios等请求工具以及后端API</strong>的逻辑层.</p><p><strong>2. 怎么封装API层?</strong></p><p>目前推荐的一种方式是使用<strong>单例模式</strong>:</p><p>来看年度账单项目中api层的实现:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> &#123;<br>    <span class="hljs-keyword">type</span> I_LearningStatistic,<br>    <span class="hljs-keyword">type</span> I_PaymentStatistic<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/models/modules/bill/interface/index&#x27;</span><br><br><span class="hljs-comment">//API基地址</span><br><span class="hljs-keyword">const</span> baseUrl = <span class="hljs-string">&#x27;https://api.sends.cc&#x27;</span><br><br><span class="hljs-comment">//下划线开头命名类表示是内部实现类,不对外导出,推荐在单例模式中使用这种命名法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">_API</span> &#123;<br>    <span class="hljs-keyword">private</span> _userAPI = axios.<span class="hljs-title function_">create</span>(&#123;<br>        <span class="hljs-attr">baseURL</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;baseUrl&#125;</span>/user/`</span><br>    &#125;)<br>    <span class="hljs-keyword">private</span> _yearBillAPI = axios.<span class="hljs-title function_">create</span>(&#123;<br>        <span class="hljs-attr">baseURL</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;baseUrl&#125;</span>/yearBill/`</span><br>    &#125;)<br>    <span class="hljs-comment">//登陆</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> <span class="hljs-title function_">login</span>(<span class="hljs-attr">code</span>: <span class="hljs-built_in">string</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">string</span>&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_userAPI</span>.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;bill_login&#x27;</span>, &#123;<br>                code<br>            &#125;)<br>            <span class="hljs-keyword">if</span> (data.<span class="hljs-property">code</span> === <span class="hljs-number">1000</span>) &#123;<br>                <span class="hljs-keyword">return</span> data.<span class="hljs-property">data</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">`something was wrong! <span class="hljs-subst">$&#123;data.msg&#125;</span>`</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">`something was wrong! <span class="hljs-subst">$&#123;error&#125;</span>`</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//!初始化用户数据 必须要初始化之后才能拿到数据</span><br>    <span class="hljs-comment">// 初始化之后要在本地存储标识!</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> <span class="hljs-title function_">initUser</span>(<span class="hljs-params">token: <span class="hljs-built_in">string</span></span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;isInitialized&#x27;</span>)) &#123;<br>            <span class="hljs-keyword">return</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_yearBillAPI</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;init&#x27;</span>, &#123;<br>                    <span class="hljs-attr">headers</span>: &#123;<br>                        token<br>                    &#125;<br>                &#125;)<br>                <span class="hljs-keyword">if</span> (data.<span class="hljs-property">code</span> === <span class="hljs-number">1000</span>) &#123;<br>                    <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;isInitialized&#x27;</span>, <span class="hljs-string">&#x27;true&#x27;</span>)<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">`something was wrong! <span class="hljs-subst">$&#123;data.msg&#125;</span>`</span>)<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">`something was wrong! <span class="hljs-subst">$&#123;error&#125;</span>`</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//获取付款信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> <span class="hljs-title function_">getPayment</span>(<span class="hljs-attr">token</span>: <span class="hljs-built_in">string</span>): <span class="hljs-title class_">Promise</span>&lt;I_PaymentStatistic | <span class="hljs-literal">null</span>&gt; &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;isInitialized&#x27;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_yearBillAPI</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;pay&#x27;</span>, &#123;<br>                    <span class="hljs-attr">headers</span>: &#123;<br>                        token<br>                    &#125;<br>                &#125;)<br>                <span class="hljs-keyword">if</span> (data.<span class="hljs-property">code</span> === <span class="hljs-number">1000</span>) &#123;<br>                    <span class="hljs-keyword">return</span> data.<span class="hljs-property">data</span> <span class="hljs-keyword">as</span> I_PaymentStatistic<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">`something was wrong! <span class="hljs-subst">$&#123;data.msg&#125;</span>`</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">`something was wrong! <span class="hljs-subst">$&#123;error&#125;</span>`</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//获取学习信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> <span class="hljs-title function_">getLearning</span>(<span class="hljs-attr">token</span>: <span class="hljs-built_in">string</span>): <span class="hljs-title class_">Promise</span>&lt;I_LearningStatistic | <span class="hljs-literal">null</span>&gt; &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;isInitialized&#x27;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_yearBillAPI</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;learn&#x27;</span>, &#123;<br>                    <span class="hljs-attr">headers</span>: &#123;<br>                        token<br>                    &#125;<br>                &#125;)<br>                <span class="hljs-keyword">if</span> (data.<span class="hljs-property">code</span> === <span class="hljs-number">1000</span>) &#123;<br>                    <span class="hljs-keyword">return</span> data.<span class="hljs-property">data</span> <span class="hljs-keyword">as</span> I_LearningStatistic<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">`something was wrong! <span class="hljs-subst">$&#123;data.msg&#125;</span>`</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">`something was wrong! <span class="hljs-subst">$&#123;error&#125;</span>`</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//这里导出单例</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">API</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">_API</span>()<br><br></code></pre></td></tr></table></figure><p><strong>3. API层的注意事项!</strong></p><p>该干的:</p><ol><li>封装异步函数返回<strong>使用models层接口约束的数据</strong></li><li>处理<strong>接口调用失败(比如说后端附在body的code)<strong>或</strong>网络错误</strong>,传给相应的<strong>错误处理层</strong></li><li><strong>校验数据是否满足对应的接口约束</strong>,若不满足则应该返回标识信息给调用方(比如使用Promise&lt;…|undefined&gt;作为返回值)</li></ol><p>不该干的:</p><ol><li>进行任何<strong>特定数据解析</strong>或<strong>改变原始数据</strong>的操作!</li></ol><h3 id="用type还是用interface"><a href="#用type还是用interface" class="headerlink" title="用type还是用interface?"></a><strong>用type还是用interface?</strong></h3><p>我们先来看一段GPT4大人给出的回答:</p><blockquote><p>在 TypeScript 中，<code>type</code> 和 <code>interface</code> 各有用武之地。通常情况下，如果你要定义一个对象的形状或者需要<a href="https://juejin.cn/post/7088304364078497800#heading-60">声明合并</a>，你可能会选择 <code>interface</code>。如果你需要使用联合类型、交叉类型、映射类型等更复杂的类型组合，你可能会选择 <code>type</code>。</p></blockquote><h3 id="类型命名规范"><a href="#类型命名规范" class="headerlink" title="类型命名规范"></a><strong>类型命名规范</strong></h3><blockquote><p>Good naming is half the battle – 好的命名是成功的一半</p></blockquote><p>我们使用<strong>部分前缀命名</strong>来区分我们抽象的数据结构</p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>变量命名使用<strong>小驼峰命名法</strong></p><p>即除第一个单词之外，其他单词首字母大写</p><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>常量命名使用<strong>全大写的蛇形命名法(UPPER_SNAKE_CASE)</strong></p><p>即所有单词都大写,多个单词间用下划线_隔开,如STUDENT_TYPE</p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>函数命名使用<strong>小驼峰命名法</strong></p><p>配合<strong>动词加名词</strong>的形式,如一个获取name的函数,应当命名为<strong>getName</strong></p><h4 id="类"><a href="#类" class="headerlink" title="类"></a><strong>类</strong></h4><p>类命名使用<strong>大驼峰命名法</strong></p><p>相比小驼峰法，大驼峰法把第一个单词的首字母也大写了,例如 MyName , MyAge…</p><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a><strong>接口</strong></h4><p>接口命名以 <strong>I_</strong> 开头加上<strong>大驼峰命名法</strong>以便区分</p><p>如: I_Post , I_User , I_UserInfo</p><h4 id="待续…"><a href="#待续…" class="headerlink" title="待续…"></a><strong>待续…</strong></h4><hr><h2 id="补充概念"><a href="#补充概念" class="headerlink" title="补充概念"></a><strong>补充概念</strong></h2><h3 id="界面级别的组件"><a href="#界面级别的组件" class="headerlink" title="界面级别的组件"></a>界面级别的组件</h3><p>指通过 <strong>VueRouter</strong> 控制的组件,也就是你在 <strong>router</strong> 文件夹中配置的组件</p><h3 id="高复用级别的组件"><a href="#高复用级别的组件" class="headerlink" title="高复用级别的组件"></a>高复用级别的组件</h3><p>指存放在<strong>components</strong>文件夹下的被多次复用的组件,最典型的例子比如说<strong>XXX-Card</strong>组件</p>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
